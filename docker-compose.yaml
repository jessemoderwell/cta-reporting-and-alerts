version: "2.1"
services:
  jobmanager:
    image: apache/flink:1.18.1
    depends_on:
      - kafka
      - kafka-setup
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager

  taskmanager:
    image: apache/flink:1.18.1
    depends_on:
      - jobmanager
      - kafka
      - kafka-setup
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2

  zookeeper:
    image: zookeeper:3.9.1
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-setup:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - kafka
    command: 
      - bash 
      - -c 
      - |
        echo "Waiting for Kafka to be ready..."
        cub kafka-ready -b kafka:29092 1 30
        echo "Creating topic input-topic"
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic input-topic
         echo "Creating topic output-topic"
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic output-topic
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  poll-api:
    build:
        context: ./poll-api
    image: poll-api:latest
    env_file:
      - .env
    container_name: poll-api
    depends_on:
      - kafka
      - kafka-setup
      - zookeeper


  generate-notifications:
    build:
      context: ./generate-notifications
    image: generate-notifications:latest
    env_file:
      - .env
    container_name: generate-notifications
    depends_on:
      mysql:
        condition: service_healthy

  send-notifications:
    build:
      context: ./send-notifications
    image: send-notifications:latest
    env_file:
      - .env
    container_name: send-notifications
    depends_on:
      mysql:
        condition: service_healthy

  mysql:
    image: mysql:8.0  # Specify the MySQL version
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase  # Name of the database to create
      MYSQL_USER: myuser          # MySQL user
      MYSQL_PASSWORD: mypassword  # MySQL user password
    ports:
      - "3306:3306"  # Expose MySQL port
    volumes:
      - mysql_data:/var/lib/mysql  # Persistent volume for MySQL data
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  mysql_data:
    driver: local